{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","apis/api.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","product","productName","src","productImage","price","CardList","productList","map","key","index","SearchBox","useState","typeList","setTypeList","useEffect","a","originalProductList","item","type","Array","from","Set","category","htmlFor","id","placeholder","onChange","handleChange","value","handleCategory","onBlur","instance","axios","create","baseURL","resource","method","url","App","getProductDetails","api","then","response","setState","data","catch","error","console","log","filterResults","criteria","state","searchText","newObj","filter","el","toLowerCase","includes","e","searchField","target","bind","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7b4b897.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card-styles.css\";\n\nexport const Card = (props) => {\n  return (\n    <div className=\"card-container\">\n      <img\n        alt={props.product.productName}\n        src={props.product.productImage}\n      ></img>\n      <p>\n        {props.product.productName} {props.product.price}\n      </p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./card-list-styles.css\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = (props) => {\n  return (\n    <div>\n      <div className=\"card-list\">\n        {props.productList &&\n          props.productList.map((product) => (\n            <Card key={product.index} product={product}></Card>\n          ))}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = (props) => {\n  const [typeList, setTypeList] = useState([]);\n\n  useEffect(() => {\n    setTypeList(uniq(props.originalProductList.map((item) => item.type)));\n  }, [props.category, props.originalProductList]);\n\n  function uniq(a) {\n    return Array.from(new Set(a));\n  }\n\n  return (\n    <div className=\"filter-row\">\n      <div className=\"filter-column\">\n        <label htmlFor=\"search-product\">\n          <p className=\"label\">Search your product</p>\n          <input\n            id=\"search-product\"\n            className=\"search\"\n            type=\"search\"\n            placeholder={props.placeholder}\n            onChange={props.handleChange}\n          />\n        </label>\n      </div>\n      <div className=\"filter-column\">\n        <label htmlFor=\"filter\">\n          <p className=\"label\">Filter by type</p>\n          <select\n            id=\"filter\"\n            value={props.category}\n            className=\"filter\"\n            onChange={props.handleCategory}\n            onBlur={props.handleCategory}\n          >\n            <option>Any</option>\n            {typeList.map((type) => (\n              <option key={type} value={type}>\n                {type}\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n    </div>\n  );\n};\n","import axios from \"axios\";\n\n// create instance of axios\nconst instance = axios.create({\n  baseURL: \"http://localhost:8001\",\n});\n\nexport default {\n  getData: (resource) =>\n    instance({\n      method: \"GET\",\n      url: resource,\n    }),\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport api from \"./apis/api\";\n\n// const unsplash = new Unsplash({ accessKey: \"M2D69tHCgCGYDPS9IsjqwnJ8sQ5TJIBppJDd9eCoPDY\" });\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      productList: [],\n      searchField: \"\",\n      category: \"\",\n      originalProductList: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleCategory = this.handleCategory.bind(this);\n\n    this.criteria = {\n      searchText: \"\",\n      category: \"\",\n    };\n  }\n\n  getProductDetails = () => {\n    api\n      .getData(\"/product-details\")\n      .then((response) => {\n        this.setState({ productList: response.data });\n        this.setState({ originalProductList: response.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  filterResults = () => {\n    let criteria = this.criteria,\n      originalProductList = this.state.originalProductList;\n    if (\n      criteria.searchText === \"\" &&\n      (criteria.category === \"\" || criteria.category === \"Any\")\n    ) {\n      this.setState({ productList: originalProductList });\n      return;\n    }\n\n    let newObj = this.state.originalProductList;\n\n    if (criteria.searchText !== \"\") {\n      newObj = newObj.filter(function (el) {\n        return el.productName.toLowerCase().includes(criteria.searchText);\n      });\n    }\n\n    // newObj = this.state.productList;\n    if (criteria.category !== \"\" && criteria.category !== \"Any\") {\n      newObj = newObj.filter(function (el) {\n        return el.type.toLowerCase().includes(criteria.category.toLowerCase());\n      });\n    }\n\n    this.setState({ productList: newObj });\n  };\n\n  componentDidMount() {\n    this.getProductDetails();\n  }\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n    this.criteria.searchText = e.target.value;\n    this.filterResults();\n  };\n\n  handleCategory = (e) => {\n    this.setState({ category: e.target.value });\n    this.criteria.category = e.target.value;\n    this.filterResults();\n  };\n  render() {\n    const { originalProductList, productList } = this.state;\n    return (\n      <>\n        <div className=\"App\">\n          <h1>Welcome to my fantastic e-commerce website!!Â©</h1>\n          <>\n            <SearchBox\n              placeholder=\"search products\"\n              handleChange={this.handleChange}\n              handleCategory={this.handleCategory}\n              category={this.state.category}\n              originalProductList={originalProductList}\n            ></SearchBox>\n            <CardList productList={productList}></CardList>\n          </>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}